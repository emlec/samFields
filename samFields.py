#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
@package    samField
@brief      Creation of graph(s) representing the number of reads depending of MAPQ, AS, or NM SAM fields.
@copyright  [GNU General Public License v3]
@author     Emilie Lecomte - 2020
* <emilie.lecomte@univ-nantes.fr>
* [Github](https://github.com/emlec)
* [INSERM 1089] (http://umr1089.univ-nantes.fr/)

Additional information referring to SAM/BAM files and pysam library:
QNAME (column 1 of sam/bam file): read.query_name
The name of the reference: read.reference_name
FLAG (column 2 of sam/bam file): read.flag
MAPQ (column 5 of sam/bam file) - COLUMN 3 (0-based): read.mapping_quality
CIGAR (column 6 of sam/bam file): read.cigarstring
Some optional fields of sam/bam file:
AS: Alignment score generated by the aligner - COLUMN 14 (0-based): read.get_tag(tag="AS")
MD: String for mismatching positions -  COLUMN 13 (0-based): read.get_tag(tag="MD")
NM: Edit distance to the reference - COLUMN 12 (0-based): read.get_tag(tag="NM")
"""

# ~~~~~~~ IMPORTS ~~~~~~~#

try:
    # Standard library imports
    import argparse
    from pathlib import Path
    import pysam
    import matplotlib.pyplot as plt

except ImportError as E:
    print(E)
    print("Please verify your dependencies. See Readme for more informations\n")
    exit()


class Graph(object):
    """
    Analysis of MAPQ, AS and or NM fields present in Binary Sequence Alignment/Map (BAM file)
    """

    # ~~~~~~~CLASS METHODS~~~~~~~#

    @classmethod
    def class_init(cls):
        """
        init class method for instantiation from command line. Parse CL arguments.
        """
        # Define parser usage, options
        parser = argparse.ArgumentParser(
            description='Analysis of MAPQ, AS and/or NM fields present in Binary Sequence Alignment/Map.')
        parser.add_argument('-l', '--list', nargs='+', dest='bam', help='List of BAM file(s)', required=True)
        parser.add_argument('-s', '--sam_field', nargs='+', dest='sam_field',
                            help='List of MAPQ, AS or NM SAM/BAM field(s)', required=True)
        parser.add_argument('-o', '--output', dest='output',
                            help='Output name. Identification of the bam files used.', required=True)
        parser.add_argument('-v', '--version', action='version', version='%(prog)s 0.0.1')
        # Parse arguments
        args = vars(parser.parse_args())
        return Graph(args["bam"], args["sam_field"], args["output"])

    # ~~~~~~~FONDAMENTAL METHODS~~~~~~~#

    def __init__(self, list_bam_path, list_bam_field, output_name):
        """
        Initialization of the attributes of the class
        list_bam is a list containing the path(s) of the bam file(s) to be analyzed
        list_field is a list containing the field(s) to be analyzed, e.g. AS, MAPQ, ...
        """
        supported_fields = ['MAPQ', 'AS', 'NM']
        self.list_bam_path = list_bam_path
        for bam_field in list_bam_field:
            if bam_field not in supported_fields:
                print("Only MAPQ, AS, NM SAM/BAM fields are accepted.")
                exit()
        self.list_bam_field = list_bam_field
        self.output_name = output_name

    def bam_extract_file_name(self):
        """
        Extract the name of BAM file(s) from the bam path.
        Input: List of BAM file paths
        Output: List of the BAM file name
        """
        list_bam_name = []
        for bam in self.list_bam_path:
            list_bam_name.append(Path(bam).stem)
        return list_bam_name

    def extract_AS(self, score):
        """
        Return the score variable as a list containing each list_read_score of BAM files
        """
        for bam in self.list_bam_path:
            list_read_score = []
            with pysam.AlignmentFile(bam, "rb") as b:
                for read in b:
                    list_read_score.append(read.get_tag(tag="AS"))
            score.append(list_read_score)
        return score

    def extract_AS_MAPQ0(self, score, mapq=0): #TODO Refactoring
        """
        Filter reads with defined MAPQ score before extract MAPQ
        Return the score variable as a list containing each list_read_score of BAM files
        """
        for bam in self.list_bam_path:
            list_read_score = []
            with pysam.AlignmentFile(bam, "rb") as b:
                for read in b:
                    if read.mapping_quality == mapq:
                        list_read_score.append(read.get_tag(tag="AS"))
            score.append(list_read_score)
        return score

    def extract_MAPQ(self, score):
        """
        Return the score variable as a list containing each list_read_score of BAM files
        """
        for bam in self.list_bam_path:
            list_read_score = []
            with pysam.AlignmentFile(bam, "rb") as b:
                for read in b:
                    list_read_score.append(read.mapping_quality)
            score.append(list_read_score)
        return score


    def extract_NM(self, score):
        """
        Return the score variable as a list containing each list_read_score of BAM files
        """
        for bam in self.list_bam_path:
            list_read_score = []
            with pysam.AlignmentFile(bam, "rb") as b:
                for read in b:
                    list_read_score.append(read.get_tag(tag="NM"))
            score.append(list_read_score)
        return score

    def def_histogram(self, score, xlabel, field):
        """
        Determination of the histogram parameters
        """
        fig, ax = plt.subplots()
        bam_name = self.bam_extract_file_name()
        count_bam_name = 0
        for bam_score in score:
            ax.hist(bam_score, bins=10, label=bam_name[count_bam_name], histtype='bar', alpha=0.7)
            count_bam_name += 1
        plt.title('Histogram')
        plt.xlabel(xlabel)
        plt.ylabel('Number of aligned reads')
        plt.legend()
        plt.savefig(self.output_name + "_" + field + ".png")

    def make_histogram(self):
        """
        # Generate the histogram, one per field, with all the bam together
        """
        # For every field, e.g. "AS", "MAPQ", ...
        for field in self.list_bam_field:
            print('Generation of the histogram representing the {} field.'.format(field))
            # For every bam files
            score = []
            if field == 'AS':
                self.def_histogram(self.extract_AS_MAPQ0(score, 0), 'Alignment_Score', field)
            elif field == 'MAPQ':
                self.def_histogram(self.extract_MAPQ(score), 'Mapping_Quality', field)
            elif field == 'NM':
                self.def_histogram(self.extract_NM(score), 'Distance_to_the_reference', field)

    def make_scatter_as_score(self):
        """
        Generate a scatter plot, with MAPQ score in x-axis and AS score in y-axis
        """

        fig, ax = plt.subplots()
        count_bam_name = 0
        init_score_as = []
        init_score_mapq = []
        score_as = self.extract_AS(init_score_as)
        score_mapq = self.extract_MAPQ(init_score_mapq)
        size_point = [10, 2]
        while count_bam_name < len(self.list_bam_path):
            ax.scatter(score_mapq[count_bam_name],
                       score_as[count_bam_name],
                       label=self.bam_extract_file_name()[count_bam_name],
                       cmap='bwr', s=size_point[count_bam_name])
            count_bam_name += 1
        plt.title('Scatter plot')
        plt.xlabel('Mapping_Quality')
        plt.ylabel('Alignment_Score')
        plt.legend(loc='best')
        plt.savefig(self.output_name + "_scatter_AS_MAPQ.png")


# ~~~~~~~TOP LEVEL INSTRUCTIONS~~~~~~~#

if __name__ == '__main__':
    graph = Graph.class_init()
    graph.make_histogram()
    graph.make_scatter_as_score()
